// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  secrets       Secret[]
  flows         Flow[]
  telegramBots  TelegramBot[]
  blockchainConfigs BlockchainConfig[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Secret {
  id        String   @id @default(cuid())
  name      String
  value     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flow {
  id          String   @id @default(cuid())
  name        String
  nodes       Json
  edges       Json
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TelegramBot {
  id          String   @id @default(cuid())
  name        String
  token       String
  webhookUrl  String?
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    TelegramMessage[]
}

model TelegramMessage {
  id           String      @id @default(cuid())
  chatId       String
  message      String
  status       MessageStatus @default(PENDING)
  sentAt       DateTime?
  botId        String
  bot          TelegramBot @relation(fields: [botId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model BlockchainConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  network       String  // e.g., "mainnet", "goerli", etc.
  infuraApiKey  String
  walletAddress String?
  isActive      Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("blockchain_configs")
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
}
